---

- name: Download k3s binary x64
  get_url:                                                           
      url: https://github.com/rancher/k3s/releases/download/{{ k3s_version }}/k3s
      dest: /usr/local/bin/k3s
      owner: root
      group: root
      mode: 755
      checksum: "{{ k3s_checksum }}"

- name: Copy K3s service file
  register: k3s_service
  template:
    src: "k3s.service.j2"
    dest: "/etc/systemd/system/k3s.service"
    owner: root
    group: root
    mode: 0755

- name: Install apparmor userland
  ansible.builtin.apt:
    name: apparmor
    update_cache: yes

- name: Install apparmor userland
  ansible.builtin.apt:
    name: apparmor-utils

- name: Install open-iscsi
  ansible.builtin.apt:
    name: open-iscsi

- name: Increae mfs.inotify.max_user_instances
  sysctl:
    name: fs.inotify.max_user_instances
    value: "12288"
    state: present
    sysctl_set: yes
    reload: yes

- name: Enable and check K3s service
  systemd:
    name: k3s
    daemon_reload: yes
    state: restarted
    enabled: yes

- name: Wait for node-token
  wait_for:
    path: /var/lib/rancher/k3s/server/node-token

- name: Register node-token file access mode
  stat:
    path: /var/lib/rancher/k3s/server
  register: p

- name: Change file access node-token
  file:
    path: /var/lib/rancher/k3s/server
    mode: "g+rx,o+rx"

- name: Read node-token from master
  slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token

- name: Store Master node-token
  set_fact: 
   token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Restore node-token file access 
  file:
    path: /var/lib/rancher/k3s/server
    mode: "{{ p.stat.mode }}"

- name: Create directory .kube
  file:
    path: /home/{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"

- name: Copy config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /home/{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"

- name: Apply traefik dynamic configmap 1/3
  template:
    dest: /tmp/traefik-dynamic-config-map.yaml
    src: "traefik-dynamic-config-map.yaml.j2"

- name: Apply traefik dynamic configmap 2/3
  become: true
  become_user: "{{ ansible_ssh_user }}"
  command: "kubectl apply -f /tmp/traefik-dynamic-config-map.yaml"

- name: Apply traefik dynamic configmap 3/3
  file:
    path: /tmp/traefik-dynamic-config-map.yaml
    state: absent

- name: Apply traefik config 1/3
  template:
    dest: /tmp/traefik-config.yaml
    src: "traefik-config.yaml.j2"

- name: Apply straefik config 2/3
  become: true
  become_user: "{{ ansible_ssh_user }}"
  command: "kubectl apply -f /tmp/traefik-config.yaml"

- name: Apply traefik config 3/3
  file:
    path: /tmp/traefik-config.yaml
    state: absent